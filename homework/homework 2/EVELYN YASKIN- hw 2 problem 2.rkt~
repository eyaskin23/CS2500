;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-reader.ss" "lang")((modname |EVELYN YASKIN- hw 2 problem 2|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Problem 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Let's return to Wordle (https://www.nytimes.com/games/wordle/)!

; Eventually we'll want to visualize a prior guess, which means categorizing
; each letter as either correct (i.e., used letter in the correct spot),
; misplaced (i.e., used letter, but in the wrong spot), or wrong (i.e.,
; the letter is not in the word in any spot).

; TODO 1/2: Design the data type LetterStatus (LS), which represents the three
;           categories of letters described above. Make sure to follow all steps
;           of the design recipe for data!


; TODO 2/2: Design the function ls->color, which accepts a LetterStatus and
;           produces an associated Color (an existing type - look up the
;           image-color? function for details and examples). In the NYT game,
;           correct letters are green, misplaced letters are yellow, and wrong
;           letters are gray - feel free to choose the shades of these colors
;           that bring you happiness :) And make sure to follow all steps of
;           the design recipe for functions!

; A LetterStatus is a string based on three options.
; Examples are correct, misplaced, or wrong.


; Interpretation: LetterStatus defines whether the letter guessed is the correct letter,
; the correct letter but in the wrong spot, or the wrong letter.

(define LETTERSTATUS-correct "correct")
(define LETTERSTATUS-misplaced "misplaced")
(define LETTERSTATUS-wrong "wrong")

; LetterStatus-temp: LetterStatus -> ?

(define (letterstatus-temp ls)
  (...
   (cond
     [(string=? ls LETTERSTATUS-correct) ...]
     [(string=? ls LETTERSTATUS-misplaced) ...]
     [(string=? ls LETTERSTATUS-wrong) ...])))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Ls-> color: Letterstatus -> color
; Produces a color based on the output of the letter selected. 

(define (ls->color ls)
   (cond
     [(string=? ls LETTERSTATUS-correct) "green"]
     [(string=? ls LETTERSTATUS-misplaced) "yellow"]
     [(string=? ls LETTERSTATUS-wrong) "red"]))


(check-expect (ls->color LETTERSTATUS-correct) "green")
(check-expect (ls->color LETTERSTATUS-misplaced) "yellow")
(check-expect (ls->color LETTERSTATUS-wrong) "red")




